import jenkins.model.*
import hudson.model.*
import hudson.slaves.*
import jenkins.slaves.*
import hudson.plugins.sshslaves.SSHLauncher
import hudson.plugins.sshslaves.verifiers.*
import com.cloudbees.plugins.credentials.*
import com.cloudbees.plugins.credentials.common.*
import com.cloudbees.plugins.credentials.domains.*
import com.cloudbees.plugins.credentials.impl.*
import com.cloudbees.jenkins.plugins.sshcredentials.impl.*

def main() {
    def connectionType = "{{ jenkins_slave_connection_type }}"

    if (isNodeExist()) {
        if (connectionType == 'jnlp') {
            return getJnlpSecret()
        } else {
            return "[WARNING] Node already exists and connected via ssh"
        }
    } else {
        createNode(connectionType)
    }
}

def isNodeExist() {
    Jenkins.instance.slaves.find({ it.name == "{{ jenkins_slave_name }}" }) ? true : false
}

def getJnlpSecret() {
    /* Return JNLP secret to connect slave to master */
    Jenkins.instance.slaves.find({ it.name == "{{ jenkins_slave_name }}" })?.computer?.jnlpMac
}

def createSshCredentials() {
    def globalDomain = Domain.global()
    def credentialsStore = Jenkins.instance.getExtensionList(
            'com.cloudbees.plugins.credentials.SystemCredentialsProvider'
    )[0].getStore()
    def userId = "{{ jenkins_user_name }}"
    def credentialsId = "mac-slave-{{ inventory_hostname }}-creds"
    def description = "SSH credentials for mac slave | {{ inventory_hostname }} | macminivault.com"
    def privateKey = '''{{ jenkins_user_private_key.content | b64decode }}'''
    def passphrase = "{{ jenkins_user_passphrase }}"

    if (!existingCredentials.contains(credentialsId)) {
        credentials = new BasicSSHUserPrivateKey(
                CredentialsScope.GLOBAL,
                credentialsId,
                userId,
                new BasicSSHUserPrivateKey.DirectEntryPrivateKeySource(privateKey),
                passphrase,
                description
        )

        credentialsStore.addCredentials(globalDomain, credentials)
    }

    return credentialsId
}

def getExistingCredentials() {
    return com.cloudbees.plugins.credentials.CredentialsProvider.lookupCredentials(
            com.cloudbees.plugins.credentials.common.StandardUsernameCredentials.class,
            Jenkins.instance,
            null,
            null
    ).id
}

/* Taken https://support.cloudbees.com/hc/en-us/articles/218154667-Create-a-Permanent-Agent-from-Groovy-Console */
def createNode(connectionType) {
    ComputerLauncher launcher

    RemotingWorkDirSettings launcherWorkDirSettings = new RemotingWorkDirSettings(
            false,
            "{{ jenkins_slave_root_folder_path }}",
            '',
            false
    )

    if (connectionType == 'jnlp') {
        launcher = new JNLPLauncher(null, null, launcherWorkDirSettings)
    }

    if (connectionType == 'ssh') {
        def sshHostKey = '''{{ jenkins_slave_ssh_host_key.content | b64decode }}'''
        def sshCredentialsId = createSshCredentials()
        SshHostKeyVerificationStrategy hostKeyVerificationStrategy = new ManuallyProvidedKeyVerificationStrategy(sshHostKey)

        launcher = new SSHLauncher(
                "{{ inventory_hostname }}", // Host
                22, // Port
                sshCredentialsId, // Credentials
                "", // JVM Options
                "", // JavaPath
                "", // Prefix Start Slave Command
                ' -jar-cache {{ jenkins_slave_remoting_folder_path }}', // Suffix Start Slave Command
                300, // Connection Timeout in Seconds
                10, // Maximum Number of Retries
                30, // The number of seconds to wait between retries
                hostKeyVerificationStrategy // Host Key Verification Strategy
        )
    }

    Slave slave = new DumbSlave(
            "{{ jenkins_slave_name }}",
            "{{ jenkins_slave_root_folder_path }}",
            launcher
    )

    /* Set slave properties */
    slave.nodeDescription = "IP: {{ ansible_default_ipv4.address | default('unknown') }} | " +
            "HOSTNAME: {{ inventory_hostname | default('unknown') }} | " +
            "CPU_CORES: {{ ansible_processor_cores | default('unknown') }} | " +
            "RAM: {{ ansible_memtotal_mb | default('unknown') }} Mb"
    slave.numExecutors = {{ jenkins_slave_number_of_executors | default(ansible_processor_cores) | int }}
    slave.labelString = "{{ jenkins_slave_labels }}"
    slave.mode = Node.Mode.NORMAL
    slave.retentionStrategy = new RetentionStrategy.Always()

    /* Create a "Permanent Agent" */
    Jenkins.instance.addNode(slave)

    if (connectionType == 'jnlp') {
        return getJnlpSecret()
    } else {
        return ''
    }
}

main()
